import std.compat;
import cpp2b;
import dylib;

fs: namespace == std::filesystem;

log_error: <Args...: type>(fmt: std::format_string<Args...>, forward args...: Args) = {
	std::println("\033[0;31mERROR\033[0m: {}", std::format(fmt, args...));
}

log_warning: <Args...: type>(fmt: std::format_string<Args...>, forward args...: Args) = {
	std::println("\033[0;33mWARNING\033[0m: {}", std::format(fmt, args...));
}

log_info: <Args...: type>(fmt: std::format_string<Args...>, forward args...: Args) = {
	std::println("\033[0;36mINFO\033[0m: {}", std::format(fmt, args...));
}

ensure_dir: (dir: fs::path) = {
	status := fs::status(dir);

	if status.type() == fs::file_type::not_found {
		fs::create_directories(dir);
	}
}

modules_dir: () modules_dir(fs::current_path());
modules_dir: (base: fs::path) -> fs::path = {
	return base / ".cache" / "cpp2" / "mod";
}

binaries_dir: () binaries_dir(fs::current_path());
binaries_dir: (base: fs::path) -> fs::path = {
	return base / ".cache" / "cpp2" / "bin";
}

find_closest_file: (filename) find_closest_file(filename, fs::current_path());
find_closest_file: (filename, base: fs::path) -> std::optional<fs::path> = {
	if fs::exists(base / filename) {
		return base / filename;
	}

	if !base.has_parent_path() || base.parent_path() == base {
		return std::nullopt;
	}

	return find_closest_file(filename, base.parent_path());
}

expect: <T>(move opt: std::optional<T>, message) -> T = {
	if !opt {
		log_error("{}", message);
		std::abort();
	}

	return opt*;
}

GitHubRepo: type = {
	private repo_: fs::path;

	operator=: (out this, repo) = {
		repo_ = repo;

		if !fs::exists(path() / ".git") {
			ensure_dir(path());
			git_("clone --depth=1 --filter=blob:none --sparse https://github.com/(repo_.generic_string())$ .");
		}
	}

	private git_: (this, args: std::string) = {
		cmd_str: std::string = "git -C (path().string())$ " + args;
		std::println("SUBCOMMAND: {}", cmd_str);
		if std::system(cmd_str.c_str()) != 0 {
			std::abort();
		}
	}

	path: (this) -> fs::path = {
		return fs::current_path() / ".cache" / "cpp2" / "repos" / repo_;
	}

	add: (this, subpath: std::string) = {
		if !fs::exists(path() / subpath) {
			git_("sparse-checkout add (subpath)$");
		}
	}
}

USAGE: std::string_view = R"docopt(
cpp2b - CLI for CPP2

Usage:
	cpp2b build
	cpp2b clean
	cpp2b run
)docopt";

module_source_extension: (compiler: cpp2b::compiler_type) -> std::string_view = {
	if compiler == cpp2b::compiler_type::msvc  { return ".ixx"; }
	if compiler == cpp2b::compiler_type::clang { return ".cppm"; }
	if compiler == cpp2b::compiler_type::gcc   { return ".cxx"; }
	std::abort();
}

bmi_extension: (compiler: cpp2b::compiler_type) -> std::string_view = {
	if compiler == cpp2b::compiler_type::msvc  { return ".ifc"; }
	if compiler == cpp2b::compiler_type::clang { return ".pcm"; }
	if compiler == cpp2b::compiler_type::gcc   { return ".pcm"; } // TODO: Is this right?
	std::abort();
}

generate_cpp2b_module: () = {
	cpp2b_module_template_path: fs::path = share_dir() / "cpp2b.cppm.tpl";
	cpp2b_module_source_path: fs::path = ".cache/cpp2/source/_build/cpp2b(module_source_extension(cpp2b::compiler()))$";

	cpp2b_module_source_stream: std::ofstream = (cpp2b_module_source_path);
	cpp2b_module_template_stream: std::ifstream = (cpp2b_module_template_path);

	vars: std::unordered_map<std::string, std::string> = (
		std::pair("@CPP2B_PROJECT_ROOT@", fs::current_path().string())
	);
	
	line: std::string = "";
	assert(cpp2b_module_template_stream);
	while std::getline(cpp2b_module_template_stream, line) {
		for vars do (entry) {
			var_name := entry.first;
			var_value := entry.second;
			pos := line.find(var_name);

			if pos != std::string::npos {
				line.replace(pos, var_name.size(), var_value);
			}
		}
		cpp2b_module_source_stream << line << "\n";
	}

	cpp2b_module_template_stream.close();
	cpp2b_module_source_stream.close();

	build_cpp1_module("cpp2b", :std::vector=(cpp2b_module_source_path), :std::vector=("std", "std.compat"));
}

generate_cpp2b_build_module: () = {
	cpp2b_module_template_path: fs::path = share_dir() / "cpp2b.build.cppm.tpl";
	cpp2b_module_source_path: fs::path = ".cache/cpp2/source/_build/cpp2b.build(module_source_extension(cpp2b::compiler()))$";

	cpp2b_module_source_stream: std::ofstream = (cpp2b_module_source_path);
	cpp2b_module_template_stream: std::ifstream = (cpp2b_module_template_path);

	vars: std::unordered_map<std::string, std::string> = (
		std::pair("@CPP2B_PROJECT_ROOT@", fs::current_path().string())
	);
	
	line: std::string = "";
	assert(cpp2b_module_template_stream);
	while std::getline(cpp2b_module_template_stream, line) {
		for vars do (entry) {
			var_name := entry.first;
			var_value := entry.second;
			pos := line.find(var_name);

			if pos != std::string::npos {
				line.replace(pos, var_name.size(), var_value);
			}
		}
		cpp2b_module_source_stream << line << "\n";
	}

	cpp2b_module_template_stream.close();
	cpp2b_module_source_stream.close();

	build_cpp1_module("cpp2b.build", :std::vector=(cpp2b_module_source_path), :std::vector=("std", "std.compat"));
}

get_vs_tools_dir: () -> fs::path = {
	return getenv_sv("VCToolsInstallDir").expect("missing 'VCToolsInstallDir' environment variable");
}

get_libcxx_build_root: () -> fs::path = {
	return getenv_sv("CPP2B_LIBCXX_BUILD_ROOT").expect("missing 'CPP2B_LIBCXX_BUILD_ROOT' environment variable");
}

get_system_modules_dir: (compiler: cpp2b::compiler_type) -> fs::path = {
	if compiler == cpp2b::compiler_type::msvc  { return get_vs_tools_dir() / "modules"; }
	if compiler == cpp2b::compiler_type::clang { return get_libcxx_build_root() / "modules"; }
	log_error("cannot find system cpp20 modules directory");
	std::abort();
}

ensure_system_module: (name: std::string) = {
	ensure_system_module(name, :std::vector<std::string> = ());
}

ensure_system_module: (name: std::string, deps) = {
	d := modules_dir();
	bmi := d / std::format("{}{}", name, bmi_extension(cpp2b::compiler()));
	system_modules_dir := get_system_modules_dir(cpp2b::compiler());

	if !fs::exists(bmi) {
		build_cpp1_module(
			name,
			:std::vector=(system_modules_dir / std::format("{}{}", name, module_source_extension(cpp2b::compiler()))),
			deps
		);
	}
}

ensure_std_modules: () = {
	ensure_system_module("std");
	ensure_system_module("std.compat", :std::vector=("std"));
}

build_cpp1_module: (name: std::string, sources, module_deps) = {
	if cpp2b::compiler() != cpp2b::compiler_type::msvc {
		log_error("TODO: build_cpp1_module non-msvc support");
		std::abort();
	}

	d := fs::absolute(modules_dir());
	bmi := d / ("(name)$.ifc");
	cmd_str: std::string = "cl /nologo /std:c++latest /W4 /MDd /EHsc /c /interface /TP";
	log_path := fs::path(".cache") / "cpp2" / "log" / "build" / ("(name)$.log");

	fs::remove(bmi);
	ensure_dir(log_path.parent_path());

	for module_deps do (dep: std::string) {
		dep_bmi := d / ("(dep)$.ifc");
		cmd_str += " /reference \"(dep_bmi.string())$\"";
	}

	for sources do (src: fs::path) {
		cmd_str += " \"(fs::absolute(src).string())$\"";
	}

	cmd_str += " /ifcOutput \"(bmi.string())$\"";

	cmd_str += cmd_log_output(fs::absolute(log_path));

	cwd := fs::current_path();
	fs::current_path(d);
	duration: std::chrono::milliseconds;
	exit_code := measure(:() std::system(cmd_str$.c_str()), out duration);
	fs::current_path(cwd);

	log_info("compile module {} ({}ms)", name, duration.count());

	if exit_code != 0 {
		log_error("failed to compile module {}", name);
		print_log_file(log_path);
		std::abort();
	}
}

has_env: (var_name: *const char) -> bool = {
	return std::getenv(var_name) != nullptr;
}

has_msvc_env_vars: () -> bool = {
	return has_env("INCLUDE") && has_env("LIB") && has_env("VCToolsVersion");
}

home_dir: () -> fs::path = {
	if constexpr cpp2b::target_platform() == cpp2b::platform::windows {
		return getenv_sv("USERPROFILE").expect("USERPROFILE does not exist");
	} else {
		return getenv_sv("HOME").expect("HOME does not exist");
	}
}

share_dir: () -> fs::path = {
	return fs::path(cpp2b::install_dir()) / "share";
}

run_with_msvc_env_vars: (args) -> int = {
	using std::views::drop;

	p: fs::path = fs::absolute(share_dir() / "run_with_msvc_env.cmd");

	cmd_str: std::string = p.string() + " " + std::string(args[0]);
	for args | drop(1) do (arg) {
		cmd_str += " (arg)$";
	}

	return std::system(cmd_str.c_str());
}

main: (args) -> int = {
	using std::views::drop;

	argz: std::vector<std::string_view> = ();

	// NOTE: this doesn't work on clang 18 with licxx for some reason
	// argz: std::vector<std::string_view> = (args.begin(), args.end());
	argz.reserve(args.size());
	for args do(arg: std::string_view) {
		argz.emplace_back(arg);
	}

	if constexpr cpp2b::compiler() == cpp2b::compiler_type::msvc {
		if !has_msvc_env_vars() {
			return run_with_msvc_env_vars(argz);
		} else {
			log_info("using vs tools {}", getenv_sv("VCToolsVersion").expect("msvc env internal error"));
		}
	}

	ensure_dir(".cache/cpp2/mod");
	ensure_dir(".cache/cpp2/bin");
	ensure_dir(".cache/cpp2/log");
	ensure_dir(".cache/cpp2/repos");
	ensure_dir(".cache/cpp2/tools");
	ensure_dir(".cache/cpp2/source/_build");

	i:=1U; while argz.size() > i next i++ {
		arg := argz[i];

		if !arg.starts_with("-") {
			remaining_args := argz | drop(i + 1);
			return inspect arg -> int {
				is "build" = subcommands::build(remaining_args);
				is "clean" = subcommands::clean(remaining_args);
				is "run"   = subcommands::run(remaining_args);
				is _       = subcommands::unknown(arg);
			};
		}

		if arg == "--help" || arg == "-h" {
			std::print("{}", USAGE);
			return 0;
		}

		log_error("unknown flag '{}'", arg);
		return 1;
	}

	log_error("requires subcommand");
	std::print("{}", USAGE);

	return 1;
}

executable_extension: () -> std::string_view =  {
	if constexpr cpp2b::target_platform() == cpp2b::platform::windows {
		return ".exe";
	} else {
		return "";
	}
}

shared_library_extension: () -> std::string_view =  {
	if constexpr cpp2b::target_platform() == cpp2b::platform::windows {
		return ".dll";
	} else if constexpr(cpp2b::target_platform() == cpp2b::platform::macos) {
		return ".dylib";
	} else {
		return ".so";
	}
}

cmd_log_output: (log_file_path: fs::path) -> std::string = {
	return " > (log_file_path.string())$ 2>&1";
}

transpile_cpp2_result: @struct type = {
	src: fs::path = ();
	cpp1_output: fs::path = ();
	output_log: fs::path = ();
	cppfront_exit_code: int = ();
	duration: std::chrono::milliseconds = ();
}

measure: (move fn, out duration: std::chrono::milliseconds) -> _ = {
	before := std::chrono::high_resolution_clock::now();
	result := fn();
	after := std::chrono::high_resolution_clock::now();
	duration = duration_cast<std::chrono::milliseconds>(after - before);
	return result;
}

transpile_cpp2: (src: fs::path, out_dir: fs::path) -> transpile_cpp2_result = {
	result: transpile_cpp2_result = ();
	result.src = fs::path(src);
	result.cpp1_output = out_dir / fs::path(src).replace_extension(".cpp");
	result.output_log = fs::path(".cache") / "cpp2" / "log" / "transpile" / fs::path(src).replace_extension(".log");
	ensure_dir(result.output_log.parent_path());

	cppfront := fs::absolute(".cache/cpp2/tools/cppfront(executable_extension())$");
	cmd_str: std::string = "(cppfront.string())$ (src.string())$ -o (result.cpp1_output.string())$ -pure -import-std -l -format-colon-errors (cmd_log_output(result.output_log))$";
	ensure_dir(result.cpp1_output.parent_path());

	result.cppfront_exit_code = measure(
		:() std::system(cmd_str$.c_str()),
		out result.duration,
	);

	return result;
}

getenv_sv: (env_var: *const char) -> std::optional<std::string_view> = {
	val := std::getenv(env_var);
	if val == nullptr {
		return std::nullopt;
	}
	return std::string_view(val, std::strlen(val));
}

unix_compile_cppfront: (cc: std::string_view, cppfront_source: fs::path, out_cppfront_binary: fs::path, log_path: fs::path) -> int = {
	cwd := fs::current_path();
	cmd_str: std::string = "(cc)$ -lstdc++ -lc -lm -std=c++20 cppfront.cpp -o (out_cppfront_binary.string())$ (cmd_log_output(fs::absolute(log_path)))$";
	fs::current_path(cppfront_source / "source");
	exit_code := std::system(cmd_str.c_str());
	fs::current_path(cwd);
	return exit_code;
}

cl_compile_cppfront: (cppfront_source: fs::path, out_cppfront_binary: fs::path, log_path: fs::path) -> int = {
	cwd := fs::current_path();
	cmd_str: std::string = "cl.exe /nologo /std:c++latest /EHsc cppfront.cpp (cmd_log_output(fs::absolute(log_path)))$";
	fs::current_path(cppfront_source / "source");
	exit_code := std::system(cmd_str.c_str());
	if exit_code == 0 {
		fs::copy_file("cppfront.exe", out_cppfront_binary, fs::copy_options::overwrite_existing);
	}
	fs::current_path(cwd);
	return exit_code;
}

ensure_cppfront: (cppfront_source: fs::path) -> int = {
	cppfront: fs::path = ".cache/cpp2/tools/cppfront(executable_extension())$";
	if !fs::exists(cppfront) {
		log_info("compiling cppfront...");

		cppfront_compile_log_path: fs::path = ".cache/cpp2/log/cppfront.log";

		if cpp2b::compiler() == cpp2b::compiler_type::clang {
			return unix_compile_cppfront("clang", fs::absolute(cppfront_source), fs::absolute(cppfront), cppfront_compile_log_path);
		}

		if cpp2b::compiler() == cpp2b::compiler_type::gcc {
			return unix_compile_cppfront("gcc", fs::absolute(cppfront_source), fs::absolute(cppfront), cppfront_compile_log_path);
		}

		if cpp2b::compiler() == cpp2b::compiler_type::msvc {
			return cl_compile_cppfront(fs::absolute(cppfront_source), fs::absolute(cppfront), cppfront_compile_log_path);
		}

		log_error("unknown compiler");
		std::abort();
	}

	return 0;
}

warn_if_error: (context, p: fs::path, ec: std::error_code) -> void = {
	if ec {
		log_warning("({}) {} - {}", context, p.generic_string(), ec.message());
	}
}

find_root_dir: (dir: fs::path) -> std::optional<fs::path> = {
	if dir.empty() { return std::nullopt; }

	if fs::exists(dir / "build.cpp2") {
		return dir;
	}

	if !dir.has_parent_path() { return std::nullopt; }

	return find_root_dir(dir.parent_path());
}

build_binary_result: @struct type = {
	outpath: fs::path = ();
	exit_code: int = ();
	log_path: fs::path = ();
	duration: std::chrono::milliseconds = ();
}
build_binary: (info: cpp2b_source_binary_info) -> build_binary_result = {
	bin_basename: fs::path;
	if info.preferred_name {
		bin_basename = fs::path(info.preferred_name*);
	} else {
		bin_basename = fs::path(info.src);
		while !bin_basename.extension().empty() {
			bin_basename.replace_extension("");
		}
	}

	if bin_basename.extension().empty() {
		bin_basename.replace_extension(executable_extension());
	}

	cppfront_include_dir := fs::absolute(".cache/cpp2/repos/hsutter/cppfront/include");
	bin_outpath := fs::absolute(".cache/cpp2/bin") / bin_basename;
	transpiled_src := fs::absolute(".cache/cpp2/source") / fs::path(info.src).replace_extension(".cpp");
	log_path := fs::absolute(".cache/cpp2/log/compile") / fs::path(info.src).replace_extension(".log");
	ensure_dir(log_path.parent_path());
	ensure_dir(bin_outpath.parent_path());

	if cpp2b::compiler() != cpp2b::compiler_type::msvc {
		log_error("TODO: build_binary non-msvc support");
		std::abort();
	}

	d := fs::absolute(modules_dir());
	cmd_str: std::string = "cl /nologo /std:c++latest /W4 /MDd /EHsc /DEBUG:full /Zi /FC";
	for info.imports do (imp: std::string) {
		imp_bmi := d / ("(imp)$.ifc");
		imp_obj := d / ("(imp)$.obj");
		cmd_str += " /reference \"(imp_bmi.string())$\" \"(imp_obj.string())$\"";
	}
	cmd_str += " \"(transpiled_src .string())$\"";
	cmd_str += " -I\"(cppfront_include_dir.string())$\"";
	cmd_str += " /Fe\"(bin_outpath.string())$\"";
	cmd_str += " (cmd_log_output(fs::absolute(log_path)))$";

	result: build_binary_result = ();
	result.outpath = bin_outpath;
	result.exit_code = measure(:() std::system(cmd_str$.c_str()), out result.duration);
	result.log_path = log_path;
	return result;
}


cpp2b_detail_build_impl: @struct type = {
	public bins: *std::vector<cpp2b_source_binary_info>;
}
cpp2b_detail_build_binary_name: (
	copy impl: *cpp2b_detail_build_impl,
	copy p: std::filesystem::path,
	copy new_binary_name: std::string_view,
) = {
	bin := std::ranges::find_if(
		impl*.bins*,
		:(bin) fs::absolute(bin.src).replace_extension("") == fs::absolute(p$).replace_extension(""),
	);
	if bin == impl*.bins*..end() {
		log_warning("cannot name unknown binary target {}", p.generic_string());
		return;
	}

	bin*.preferred_name = new_binary_name;
}

cpp2b_detail_build: (copy _impl: *cpp2b_detail_build_impl) -> void = {
	// empty. this is just so we can decltype the signature
}

build_build_script: (info: cpp2b_source_build_info) -> build_binary_result = {
	cppfront_include_dir := fs::absolute(".cache/cpp2/repos/hsutter/cppfront/include");
	bin_outpath := fs::absolute(".cache/cpp2/bin") / fs::path(info.src).replace_extension(shared_library_extension());
	transpiled_src := fs::absolute(".cache/cpp2/source") / fs::path(info.src).replace_extension(".cpp");
	log_path := fs::absolute(".cache/cpp2/log/compile") / fs::path(info.src).replace_extension(".log");
	ensure_dir(log_path.parent_path());
	ensure_dir(bin_outpath.parent_path());

	if cpp2b::compiler() != cpp2b::compiler_type::msvc {
		log_error("TODO: build_build_script non-msvc support");
		std::abort();
	}

	d := fs::absolute(modules_dir());
	cmd_str: std::string = "cl /nologo /std:c++latest /W4 /MDd /EHsc /LDd /DLL";
	for info.imports do (imp: std::string) {
		imp_bmi := d / ("(imp)$.ifc");
		imp_obj := d / ("(imp)$.obj");
		cmd_str += " /reference \"(imp_bmi.string())$\" \"(imp_obj.string())$\"";
	}
	cmd_str += " \"(transpiled_src .string())$\"";
	cmd_str += " -I\"(cppfront_include_dir.string())$\"";
	cmd_str += " /Fe\"(fs::relative(bin_outpath).string())$\"";
	cmd_str += " /link";
	cmd_str += " (cmd_log_output(fs::relative(log_path)))$";

	result: build_binary_result = ();
	result.outpath = bin_outpath;
	result.exit_code = measure(:() std::system(cmd_str$.c_str()), out result.duration);
	result.log_path = log_path;
	return result;
}

print_log_file: (p: fs::path) -> void = {
	stream: std::ifstream = p;
	line: std::string = "";
	while std::getline(stream, line) {
		std::cerr << line << "\n";
	}
	stream.close();
}

assert_symbol: (d: dylib, symbol) = {
	if !d.has_symbol(symbol) {
		log_error("missing symbol '{}'", symbol);
		std::abort();
	}
}

subcommands: type = {
	clean: (args) -> int = {
		if !args.empty() {
			log_error("clean does not support arguments");
			return 1;
		}

		root_dir := find_root_dir(fs::current_path());
		if !root_dir {
			log_error("failed to find cpp2b project root directory - make sure you have build.cpp2 in the root of your project");
			return 1;
		}
		fs::current_path(root_dir*);

		cache_dir: fs::path = ".cache/cpp2";

		fs::remove_all(cache_dir);
		log_info("{} removed", fs::absolute(cache_dir).string());

		return 0;
	}
	
	build: (args) -> int = {
		if !args.empty() {
			log_error("build does not support arguments");
			return 1;
		}

		root_dir := find_root_dir(fs::current_path());
		if !root_dir {
			log_error("failed to find cpp2b project root directory - make sure you have build.cpp2 in the root of your project");
			return 1;
		}
		fs::current_path(root_dir*);

		(repo := GitHubRepo("hsutter/cppfront")) { 
			repo.add("source");
			repo.add("include");
			(exit_code := ensure_cppfront(repo.path())) if exit_code != 0 {
				return exit_code;
			}
		}

		ensure_std_modules();
		generate_cpp2b_module();
		generate_cpp2b_build_module();

		transpile_source_dir: fs::path = ".cache/cpp2/source";
		cpp2_source_files: std::vector<fs::path> = ();
		cpp1_module_source_files: std::vector<fs::path> = ();
		ec: std::error_code = ();

		for fs::recursive_directory_iterator(transpile_source_dir) do(p: fs::path) {
			if p.extension() != ".cpp" { continue; }
			fs::permissions(p, fs::perms::others_write, fs::perm_options::add, ec);
			warn_if_error("perms", p, ec);
			fs::remove(p, ec);
			warn_if_error("remove", p, ec);
		}

		src_loop: for fs::recursive_directory_iterator(fs::current_path(), fs::directory_options::follow_directory_symlink) do(p: fs::path) {
			if p.extension() == ".cpp2" {
				rel_path := fs::relative(p, fs::current_path());
				for rel_path do(rel_path_comp) {
					if rel_path_comp.string().starts_with(".") {
						continue src_loop;
					}
				}
				cpp2_source_files.emplace_back(rel_path);
			} else if p.extension() == ".cppm" {
				rel_path := fs::relative(p, fs::current_path());
				for rel_path do(rel_path_comp) {
					if rel_path_comp.string().starts_with(".") {
						continue src_loop;
					}
				}
				cpp1_module_source_files.emplace_back(rel_path);
			}
		}

		if cpp2_source_files.empty() {
			log_error("No cpp2 source files");
			return 1;
		}

		transpile_futures: std::vector<std::future<transpile_cpp2_result>> = ();
		cpp2b_parse_futures: std::vector<std::future<cpp2b_source_info>> = ();
		transpile_futures.reserve(cpp2_source_files.size());
		cpp2b_parse_futures.reserve(cpp2_source_files.size());


		for cpp2_source_files do(src_file: fs::path) {
			transpile_futures.emplace_back(std::async(std::launch::async, transpile_cpp2, src_file, transpile_source_dir));
			cpp2b_parse_futures.emplace_back(std::async(std::launch::async, cpp2b_parse_source, src_file));
		}

		for transpile_futures do(inout fut) {
			info := fut.get();
			if info.cppfront_exit_code != 0 {
				log_error("cppfront exited with {} while transpiling {} - see log for full details {}", info.cppfront_exit_code, info.src.generic_string(), info.output_log.generic_string());
				return info.cppfront_exit_code;
			}

			log_info("transpile {} -> {} ({}ms)", info.src.generic_string(), info.cpp1_output.generic_string(), info.duration.count());
		}

		bins: std::vector<cpp2b_source_binary_info> = ();
		mods: std::vector<cpp2b_source_module_info> = ();
		build_scripts: std::vector<cpp2b_source_build_info> = ();
		unknowns: std::vector<cpp2b_source_unknown_info> = ();

		for cpp2b_parse_futures do(inout fut) {
			info := fut.get();
			if info.is_mod() {
				mods.emplace_back(info.mod());
			} else if info.is_bin() {
				bins.emplace_back(info.bin());
			} else if info.is_build() {
				build_scripts.emplace_back(info.build());
			} else {
				log_error("source file {} is neither a module or a binary source file", info.unknown().src.generic_string());
				unknowns.emplace_back(info.unknown());
			}
		}

		for fs::recursive_directory_iterator(transpile_source_dir) do(p: fs::path) {
			if p.extension() != ".cpp2" { continue; }
			fs::permissions(p, fs::perms::others_read, ec);
			warn_if_error("perms", p, ec);
		}

		built_modules: std::unordered_map<std::string, bool> = (
			std::pair("cpp2b", true),
			std::pair("cpp2b.build", true),
			std::pair("std", true),
			std::pair("std.compat", true),
		);


		for cpp1_module_source_files do(src_file: fs::path) {
			result := cpp2b_parse_cpp1_module_statements(std::ifstream(src_file));

			if result.module_name.empty() {
				log_error("cannot find exported module in {}", src_file.generic_string());
				std::abort();
			}

			if !result.exported {
				log_error("module {} in {} must be exported", result.module_name, src_file.generic_string());
				std::abort();
			}
			
			build_cpp1_module(result.module_name, :std::vector=(src_file), result.imports);
			built_modules[result.module_name] = true;
		}

		build_script_loop: for build_scripts do(build_script) {
			for build_script.imports do(imp) {
				if !built_modules.contains(imp) {
					log_error("cannot build build script {} - missing import {}", build_script.src.generic_string(), imp);
					continue build_script_loop;
				}
			}

			build_result := build_build_script(build_script);

			if build_result.exit_code != 0 {
				log_error("failed to build {} - exit code {}", build_script.src.generic_string(), build_result.exit_code);
				print_log_file(build_result.log_path);
				return build_result.exit_code;
			}

			log_info("build script built {} ({}ms)", fs::relative(build_result.outpath).generic_string(), build_result.duration.count());

			build_dylib := dylib(build_result.outpath);

			build_dylib.assert_symbol("cpp2b_detail_build");
			build_dylib.assert_symbol("cpp2b_detail_build_binary_name");

			build_dylib.get_variable<decltype(cpp2b_detail_build_binary_name&)>("cpp2b_detail_build_binary_name") = cpp2b_detail_build_binary_name&;

			b: cpp2b_detail_build_impl = (bins&);
			build_dylib.get_function<decltype(cpp2b_detail_build)>("cpp2b_detail_build")(b&);
		}

		for mods do(mod) {
			log_warning("cannot build user module {} (yet)", mod.name);
		}

		bin_loop: for bins do(bin) {
			for bin.imports do(imp) {
				if !built_modules.contains(imp) {
					log_error("cannot build binary {} - missing import {}", bin.src.generic_string(), imp);
					continue bin_loop;
				}

				if imp == "cpp2b.build" {
					log_error("cpp2b.build module may only be imported in build.cpp files");
					continue bin_loop;
				}
			}

			build_result := build_binary(bin);

			if build_result.exit_code != 0 {
				log_error("failed to build binary - exit code {}", build_result.exit_code);
				print_log_file(build_result.log_path);
				return build_result.exit_code;
			}

			log_info("binary built {} ({}ms)", fs::relative(build_result.outpath).generic_string(), build_result.duration.count());
		}

		return 0;
	}

	run: (args) -> int = {
		root_dir := find_root_dir(fs::current_path());
		if !root_dir {
			log_error("failed to find cpp2b project root directory - make sure you have build.cpp2 in the root of your project");
			return 1;
		}
		fs::current_path(root_dir*);

		std::println("TODO: run cpp2b project");
		for args do (arg) {
			std::println("arg is {}", arg);
		}
		return 0;
	}

	unknown: (subcommand) -> int = {
		log_error("unknown subcommand {}", subcommand);
		return 1;
	}
}

cpp2b_source_module_info: @struct type = {
	exported: bool = ();
	imports: std::vector<std::string> = ();
	name: std::string = ();
	partition: std::optional<std::string> = ();

	is_primary: (this) -> bool = !partition.has_value();
}

cpp2b_source_binary_info: @struct type = {
	src: fs::path = ();
	imports: std::vector<std::string> = ();
	preferred_name: std::optional<std::string> = ();
}

cpp2b_source_build_info: @struct type = {
	src: fs::path = ();
	imports: std::vector<std::string> = ();
}

cpp2b_source_unknown_info: @struct type = {
	src: fs::path;
}

cpp2b_source_info: @union type = {
	unknown: cpp2b_source_unknown_info;
	mod: cpp2b_source_module_info;
	bin: cpp2b_source_binary_info;
	build: cpp2b_source_build_info;
}

as_sv: (range) -> std::string_view = std::string_view(range.begin(), range.end());

ltrim: (str) -> std::string_view = {
	i:=0U; while str.size() > i next i++ {
		if !std::isspace(str[i]) { break; }
	}

	return std::string_view(str).substr(i, str.size() - i);
}

rtrim: (str) -> std::string_view = {
	i:=str.ssize()-1; while i > 0 next i-- {
		if !std::isspace(str[i]) { break; }
		if i == 0 { break; }
	}

	return std::string_view(str).substr(0, i + 1);
}

lstrip: (str, amount) -> std::string_view = {
	return std::string_view(str).substr(amount, str.size() - amount);
}

contains_any_whitespace: (str: std::string_view) -> bool = {
	for str do(c: char) {
		if std::isspace(c) {
			return true;
		}
	}
	return false;
}

cpp2b_parse_cpp1_module_statements: (copy stream: std::ifstream) -> (module_name: std::string, imports: std::vector<std::string>, exported: bool) = {
	statement: std::string = "";
	module_name = "";
	imports = ();
	exported = false;

	while std::getline(stream, statement) {
		trimmed_statement := statement.ltrim();
		kw_import: std::string_view == "import";
		kw_export: std::string_view == "export";
		kw_module: std::string_view == "module";

		if trimmed_statement.starts_with(kw_import) {
			import_name := trimmed_statement.lstrip(kw_import.size()).ltrim().rtrim();
			if !contains_any_whitespace(import_name) {
				imports.emplace_back(import_name);
			}
		}

		if trimmed_statement.starts_with(kw_export) {
			trimmed_statement = trimmed_statement.lstrip(kw_export.size()).ltrim();
			if !trimmed_statement.starts_with(kw_module) { continue; }

			found_mod_name := trimmed_statement.lstrip(kw_module.size()).ltrim();
			partition_start := module_name.find(':');
			if partition_start != std::string::npos {
				found_mod_name = found_mod_name.substr(0, partition_start).rtrim();
			} else {
				found_mod_name = found_mod_name.rtrim();
			}

			while !found_mod_name.empty() && (std::isspace(found_mod_name.back()) || found_mod_name.back() == ';') {
				found_mod_name = found_mod_name.substr(0, found_mod_name.size() - 1);
			}

			module_name = std::string(found_mod_name);
			exported = true;
			break;
		}
	}
}

cpp2b_parse_source: (source_file: fs::path) -> cpp2b_source_info = {
	stream: std::ifstream = source_file;
	statement: std::string = "";
	imports: std::vector<std::string> = ();

	// without this cppfront thinks stream is never used
	assert(stream);

	result: cpp2b_source_info = ();
	result.set_unknown(cpp2b_source_unknown_info(source_file));

	while std::getline(stream, statement, ';') {
		trimmed_statement := statement.ltrim();
		kw_import: std::string_view = "import";

		if trimmed_statement.starts_with(kw_import) {
			import_name := trimmed_statement.lstrip(kw_import.size()).ltrim().rtrim();
			if !contains_any_whitespace(import_name) {
				imports.emplace_back(import_name);
			}
		}
	}

	if std::ranges::find(imports, "std") == imports.end() {
		imports.emplace_back("std");
	}

	if std::ranges::find(imports, "std.compat") == imports.end() {
		imports.emplace_back("std.compat");
	}

	if source_file.filename() == "build.cpp2" {
		build_info: cpp2b_source_build_info = ();
		build_info.src = source_file;
		build_info.imports = imports;
		result.set_build(build_info);
		return result;
	}

	stream.clear();
	stream.seekg(0);

	while std::getline(stream, statement, ';') {
		trimmed_statement := statement.ltrim();
		kw_export: std::string_view = "export";
		kw_module: std::string_view = "module";

		if trimmed_statement.starts_with(kw_export) {
			trimmed_statement = trimmed_statement.lstrip(kw_export.size()).ltrim();
			if !trimmed_statement.starts_with(kw_module) { break; }

			module_name := trimmed_statement.lstrip(kw_module.size()).ltrim();
			partition_start := module_name.find(':');
			if partition_start != std::string::npos {
				module_name = module_name.substr(0, partition_start).rtrim();
			} else {
				module_name = module_name.rtrim();
			}

			mod_info: cpp2b_source_module_info = ();

			mod_info.name = std::string(module_name);
			mod_info.imports = imports;
			mod_info.exported = true;

			result.set_mod(mod_info);
			return result;
		}
	}

	stream.clear();
	stream.seekg(0);

	line: std::string = ();
	while std::getline(stream, line) {
		trimmed_line := line.ltrim();
		if trimmed_line.starts_with("main") {
			after_main := trimmed_line.substr(4).ltrim();
			if after_main.empty() || after_main[0] == ':' {
				bin_info: cpp2b_source_binary_info = ();
				bin_info.src = source_file;
				bin_info.imports = imports;
				result.set_bin(bin_info);
				return result;
			}
		}
	}

	return result;
}
